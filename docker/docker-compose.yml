version: '3.8'

services:
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: qdrant-server
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
      - ./qdrant_config:/qdrant/config
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__OPTIMIZERS__DELETED_THRESHOLD=0.2
      - QDRANT__STORAGE__OPTIMIZERS__VACUUM_MIN_VECTOR_NUMBER=1000
      - QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER=0
      - QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD=20000
      - QDRANT__STORAGE__OPTIMIZERS__FLUSH_INTERVAL_SEC=5
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 4G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  qdrant-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gpu
    container_name: qdrant-vector-service
    ports:
      - "8001:8001"  # API port
      - "8002:8002"  # Metrics port
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      # Qdrant connection
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_GRPC_PORT=6334
      - QDRANT_COLLECTION_NAME=face_embeddings
      
      # GPU configuration
      - QDRANT_USE_GPU=true
      - QDRANT_GPU_DEVICE_ID=0
      - QDRANT_GPU_MEMORY_FRACTION=0.8
      - QDRANT_ENABLE_CUDA_GRAPHS=true
      
      # Performance settings
      - QDRANT_BATCH_SIZE=32
      - QDRANT_SEARCH_TIMEOUT=5.0
      - QDRANT_MAX_CONCURRENT_REQUESTS=100
      
      # HNSW optimization
      - QDRANT_HNSW_EF_CONSTRUCT=200
      - QDRANT_HNSW_M=16
      - QDRANT_QUANTIZATION_ENABLED=true
      
      # API configuration
      - QDRANT_API_HOST=0.0.0.0
      - QDRANT_API_PORT=8001
      
      # Logging
      - QDRANT_LOG_LEVEL=INFO
      - QDRANT_LOG_FORMAT=json
      
      # Monitoring
      - QDRANT_ENABLE_METRICS=true
      - QDRANT_METRICS_PORT=8002
    volumes:
      - ./logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 8G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: qdrant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: qdrant-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  qdrant_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: qdrant-network
